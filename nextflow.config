/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/cnvanalysis Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Load parameters config
includeConfig 'conf/params.config'    // Pipeline parameters

// Load base config for all pipelines
includeConfig 'conf/base.config'      // Base settings

// Load resource configs
includeConfig 'conf/resources/cpus.config'    // CPU resources
includeConfig 'conf/resources/gpus.config'    // GPU resources
includeConfig 'conf/resources/memory.config'  // Memory resources
includeConfig 'conf/resources/time.config'    // Time resources
includeConfig 'conf/resources/extra.config'    // Extra resources

// Load nf-core profiles
includeConfig 'conf/profiles/nf-core-defaults.config' // nf-core default profiles

// Load igenomes config for AWS genomes
includeConfig 'conf/igenomes.config' // iGenomes support

// Profile definitions for different environments
profiles {
    test         { includeConfig 'conf/profiles/test.config' }           // Minimal test
    test_full    { includeConfig 'conf/profiles/test_full.config' }      // Full test
    drac         { includeConfig 'conf/profiles/drac.config' }           // DRAC cluster
    drac_test    { includeConfig 'conf/profiles/drac_test.config' }      // DRAC test
    mpgi_local   { includeConfig 'conf/profiles/mpgi_local.config' }     // Local MPGI
}

// Load nf-core custom profiles from different Institutions (if not offline)
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Optionally load pipeline-specific custom profiles (commented out)
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/oncoseq.config" : "/dev/null"

// Load default, manifest, and validation configs
includeConfig 'conf/defaults.config'      // Default values
includeConfig 'conf/manifest.config'      // Manifest metadata
includeConfig 'conf/validation.config'    // Parameter validation

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Set bash options for all processes
// This is a workaround for the issue with Nextflow >22.10.0 and bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Function to check the maximum ressources in DRAC
// Note funcitons must be in the top level config file
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}